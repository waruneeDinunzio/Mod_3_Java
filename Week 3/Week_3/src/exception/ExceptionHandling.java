package exception;

public class ExceptionHandling {

	public static void main(String[] args) {
		// ========== ERROR ==========
		/*
		 * • Generated by the environment that your application is running on. 
		 * • For example, memory leaks, making too many objects and running out of memory.
		 * • You can't recover from these errors if you change your code.
		 * • This will require administrative tasks to fix these errors such as running garbage collection
		 * at certain points to avoid running out of memory.
		 */
		
		/* =======================================================
		 *					EXCEPTION HANDLING
		 * ======================================================= 
		 */
		
		// ========= UNCHECKED EXCEPTIONS ==========
		// • Runs on runtime
		String str = "This is my string";
		String name = null;
		
		// ========= WE ARE CREATING LOGIC FOR OUR STR VARIABLE ==========
		try {
			// We are running a loop to display one character at a time.
			// Maybe by mistake you messed up writing your loop conditions
			// This will throw an exception because we are running the loop an extra iteration.
			// Exception error "StringIndexOutofBoundsException: String index out of range: 17 because our string only has 16 characters.
			// We can catch this exception with a try/catch block
			for(int i =0; i <= str.length(); i++) {
				System.out.println(str.charAt(i));
			}
		} catch(StringIndexOutOfBoundsException ex) {
			// For each try, you need to have a catch block. 
			// It is best practice to grab the specific exception rather than just using the Exception class
			// This will allow us to catch many exceptions if we are being specific and will not disrupt the flow of our application.
			System.out.println("Exception occurred: " + ex.getMessage());
		} catch(Exception e) {
			System.out.println("Exception occurred: " + e.getMessage());
		}
		
		// ========= WE ARE CREATING LOGIC FOR OUR NAME VARIABLE =========
		try {
			System.out.println("The length of the name is: " + name.length());
		} catch(NullPointerException npex) {
			System.out.println(npex.getMessage());
		} finally {
			System.out.println("Hello! We will always run!");
		}	
		
		System.out.println("Just finished printing my string! ;) ");
	}

}
